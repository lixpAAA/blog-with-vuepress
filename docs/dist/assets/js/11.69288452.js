(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{330:function(e,t,n){"use strict";n.r(t);var r=n(33),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"如何利用在vue项目中利用jest搞测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何利用在vue项目中利用jest搞测试"}},[e._v("#")]),e._v(" 如何利用在vue项目中利用jest搞测试")]),e._v(" "),n("h3",{attrs:{id:"项目设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目设置"}},[e._v("#")]),e._v(" 项目设置")]),e._v(" "),n("ul",[n("li",[e._v("使用vue-cli3.0以上")]),e._v(" "),n("li",[e._v("安装 @vue/cli-plugin-unit-jest //  单元测试插件，更多细节请移步"),n("a",{attrs:{href:"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-unit-jest/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("相关文档"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("安装 @vue/test-utils //  vue单元测试函数库，更多细节请移步"),n("a",{attrs:{href:"https://vue-test-utils.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[e._v("相关文档"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("配置jest.config.js文件， "),n("a",{attrs:{href:"https://jestjs.io/docs/zh-Hans/configuration",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考文档"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v('package.json添加   "test:unit": "vue-cli-service test:unit --coverage", // 生成html测试报告\n"test": "vue-cli-service test:unit -u --silent",')])]),e._v(" "),n("h3",{attrs:{id:"示例：test-spec-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例：test-spec-js"}},[e._v("#")]),e._v(" 示例：test.spec.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { mount, createLocalVue } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\nimport Vuex from 'vuex'\n\nconst localVue = createLocalVue()\n// mock函数方便模拟ajax请求\nconst mockFn = function(url) { // url.方便模拟不同url返回不同的数据\n return Promise.resolve({list:{a:1}})\n}\nlocalVue.use(Vuex)\nconst mock = ()=> {}\nconst store = new Vuex.Store({\n  user:{}\n})\nconst $confirm = mock\nconst $route = {\n  query: {userId: '123'},\n  params:{}\n}\n// mock $router对象\nconst $router = {\n  go:mock,\n  push:mock,\n  replace:mock,\n}\nlocalVue.prototype.$ajax = {\n  get:(url)=> mockFn(url),\n  post:(url)=> mockFn(url),\n  delete:(url)=> mockFn(url),\n  put:(url)=> mockFn(url),\n}\ndescribe('HelloWorld.vue', () => {\n  it('renders props.msg when passed', () => {\n    const wrapper = mount(HelloWorld, {\n      localVue,\n      store,\n      propsData:{}, // 可以传入一些 vue实例选项中的props data\n      mocks: {\n        $router,\n        $route,\n        $confirm // 模拟像this.$comfirm这样的弹出确认框\n      }\n    })\n    wrapper.vm.getDate()  // 可以直接调用vue实例中的函数， 跟多参考https://vue-test-utils.vuejs.org/zh/guides/#%E8%B5%B7%E6%AD%A5\n    expect(wrapper.vm.msg).toBeUndefined() // jest 断言库\n  })\n  it('userId', () => {\n    const wrapper = mount(HelloWorld, {\n      localVue,\n      store,\n      mocks: {\n        $router,\n        $route\n      }\n    })\n    expect(wrapper.vm.$route.query.userId).toBe('123') // \n  })\n  test('re', ()=> {\n    const wrapper = mount(HelloWorld, {\n      localVue,\n      store,\n      mocks: {\n        $router,\n        $route\n      }\n    })\n    expect(wrapper.element).toMatchSnapshot('test')\n  })\n})\n\n")])])]),n("p",[e._v("最后运行 npm run test:unit (这个后面可加文件，表示单独对某个文件测试)\n打开coverage下的html就可以看到测试报告了")])])}),[],!1,null,null,null);t.default=o.exports}}]);